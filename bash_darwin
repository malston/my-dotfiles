# Use ANSI color sequences to distinguish file types
export CLICOLOR=1

# Build our prompt
function enable_bash_it() {
	# Path to the bash it configuration
	export BASH_IT="/Users/malston/.bash_it"

	# Lock and Load a custom theme file.
	# Leave empty to disable theming.
	# location /.bash_it/themes/
	export BASH_IT_THEME='bakke'
	# export BASH_IT_THEME='powerline'
	# export BASH_IT_THEME='powerline-multiline'

	export POWERLINE_PROMPT="scm python_venv cwd k8s_context k8s_namespace"
	# export POWERLINE_RIGHT_PROMPT="k8s_context k8s_namespace"
	# export POWERLINE_LEFT_PROMPT="scm cwd python_venv user_info"
	export POWERLINE_COMPACT=0

	# (Advanced): Change this to the name of your remote repo if you
	# cloned bash-it with a remote other than origin such as `bash-it`.
	export BASH_IT_REMOTE='bash-it'

	# Your place for hosting Git repos. I use this for private repos.
	export GIT_HOSTING='git@git.domain.com'

	# Don't check mail when opening terminal.
	unset MAILCHECK

	# Change this to your console based IRC client of choice.
	export IRC_CLIENT='irssi'

	# Set this to the command you use for todo.txt-cli
	export TODO="t"

	# Set this to false to turn off version control status checking within the prompt for all themes
	export SCM_CHECK=true

	# Set Xterm/screen/Tmux title with only a short hostname.
	# Uncomment this (or set SHORT_HOSTNAME to something else),
	# Will otherwise fall back on $HOSTNAME.
	#export SHORT_HOSTNAME=$(hostname -s)

	# Set Xterm/screen/Tmux title with only a short username.
	# Uncomment this (or set SHORT_USER to something else),
	# Will otherwise fall back on $USER.
	# export SHORT_USER=${USER:0:8}

	# Set Xterm/screen/Tmux title with shortened command and directory.
	# Uncomment this to set.
	#export SHORT_TERM_LINE=true

	# Set vcprompt executable path for scm advance info in prompt (demula theme)
	# https://github.com/djl/vcprompt
	#export VCPROMPT_EXECUTABLE=~/.vcprompt/bin/vcprompt

	# (Advanced): Uncomment this to make Bash-it reload itself automatically
	# after enabling or disabling aliases, plugins, and completions.
	# export BASH_IT_AUTOMATIC_RELOAD_AFTER_CONFIG_CHANGE=1

	# Uncomment this to make Bash-it create alias reload.
	# export BASH_IT_RELOAD_LEGACY=1

	# Load Bash It
	source "$BASH_IT"/bash_it.sh
	source "$BASH_IT"/custom/custom.prompt
}
enable_bash_it
export -f enable_bash_it

export GIT_DUET_GLOBAL=true
export GIT_DUET_ROTATE_AUTHOR=1
export GIT_DUET_SET_GIT_USER_CONFIG=1
export GIT_PS1_SHOWUNTRACKEDFILES=true

# Add cargo to path
export PATH="$HOME/.cargo/bin:$PATH"

test -e "${HOME}/.iterm2_shell_integration.bash" && source "${HOME}/.iterm2_shell_integration.bash"

# Set maxfiles and maxproc per this gist:
# https://gist.github.com/tombigel/d503800a282fcadbee14b537735d202c
ulimit -n 200000
ulimit -u 2048

[[ -r "/usr/local/etc/profile.d/bash_completion.sh" ]] && . "/usr/local/etc/profile.d/bash_completion.sh"

# The next line updates PATH for the Google Cloud SDK.
if [ -f '/Users/malston/tools/google-cloud-sdk/path.bash.inc' ]; then . '/Users/malston/tools/google-cloud-sdk/path.bash.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '/Users/malston/tools/google-cloud-sdk/completion.bash.inc' ]; then . '/Users/malston/tools/google-cloud-sdk/completion.bash.inc'; fi

export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"

# Kubernetes prompt
if [ -f /usr/local/opt/kube-ps1/share/kube-ps1.sh ]; then . '/usr/local/opt/kube-ps1/share/kube-ps1.sh'; fi

# Setup autocomplete for kubectl commands
source <(kubectl completion bash)
alias k=kubectl
complete -F __start_kubectl k

# Add istio cli to path
export PATH="$PATH:$HOME/workspace/install-istio/istio-1.2.2/bin"

# Setup autocomplete for minio cli commands
complete -C /usr/local/bin/mc mc

source "$HOME/.sdkman/bin/sdkman-init.sh"

export PATH="$HOME/.jenv/bin:$PATH"
eval "$(jenv init -)"

eval "$(rbenv init -)"

export BASH_SILENCE_DEPRECATION_WARNING=1

# enable direnv
if [ which -a direnv ]; then
    eval "$(direnv hook bash)"
fi

# Go
export PATH=~/bin:~/.bin:~/go/bin:/usr/local/go/bin:$PATH
export GOPATH=$HOME/workspace/go
export PATH=$GOPATH/bin:$PATH
# enable ginkgo focus in editors
export GINKGO_EDITOR_INTEGRATION=true

# Python
if command -v pyenv 1>/dev/null 2>&1; then
  eval "$(pyenv init -)"
fi

# We want to regularly go to our virtual environment directory
export WORKON_HOME=~/.virtualenvs

# If in a given virtual environment, make a virtual environment directory
# If one does not already exist
mkdir -p $WORKON_HOME

# Activate the new virtual environment by calling this script
# The workon and mkvirtualenv functions are in here
test -e "${HOME}/.pyenv/versions/$(pyenv version-name)/bin/virtualenvwrapper.sh" && source "${HOME}/.pyenv/versions/$(pyenv version-name)/bin/virtualenvwrapper.sh"