
# Add cargo to path
export PATH="$HOME/.cargo/bin:$PATH"

test -e "${HOME}/.iterm2_shell_integration.bash" && source "${HOME}/.iterm2_shell_integration.bash"

[[ -r "/usr/local/etc/profile.d/bash_completion.sh" ]] && . "/usr/local/etc/profile.d/bash_completion.sh"

# The next line updates PATH for the Google Cloud SDK.
if [ -f '/Users/malston/tools/google-cloud-sdk/path.bash.inc' ]; then . '/Users/malston/tools/google-cloud-sdk/path.bash.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '/Users/malston/tools/google-cloud-sdk/completion.bash.inc' ]; then . '/Users/malston/tools/google-cloud-sdk/completion.bash.inc'; fi

export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"

# Kubernetes prompt
# if [ -f /usr/local/opt/kube-ps1/share/kube-ps1.sh ]; then . '/usr/local/opt/kube-ps1/share/kube-ps1.sh'; fi
# this is set in the custom.prompt now

# Setup autocomplete for kubectl commands
source <(kubectl completion bash)
alias k=kubectl
complete -F __start_kubectl k

# Setup autocomplete for minio cli commands
complete -C /usr/local/bin/mc mc

source "$HOME/.sdkman/bin/sdkman-init.sh"

export PATH="$HOME/.jenv/bin:$PATH"
eval "$(jenv init -)"

eval "$(rbenv init -)"

export BASH_SILENCE_DEPRECATION_WARNING=1

# enable direnv
if [ which -a direnv ]; then
    eval "$(direnv hook bash)"
fi

# Go
export PATH=~/bin:~/.bin:~/go/bin:/usr/local/go/bin:$PATH
export GOPATH=$HOME/workspace/go
export PATH=$GOPATH/bin:$PATH
# export PATH="/usr/local/opt/go@1.15/bin:$PATH"

# enable ginkgo focus in editors
export GINKGO_EDITOR_INTEGRATION=true

# GNU Sed
if [ -d /usr/local/opt/gnu-sed/libexec/gnubin ]; then
  PATH="/usr/local/opt/gnu-sed/libexec/gnubin:$PATH"
fi

# Python
# See https://github.com/pyenv/pyenv
# See https://github.com/pyenv/pyenv-virtualenv
if command -v pyenv 1>/dev/null 2>&1; then
  eval "$(pyenv init -)"
fi

# We want to regularly go to our virtual environment directory
export WORKON_HOME=~/.virtualenvs

# If in a given virtual environment, make a virtual environment directory
# If one does not already exist
mkdir -p $WORKON_HOME

# Activate the new virtual environment by calling this script
# The workon and mkvirtualenv functions are in here
# test -e "${HOME}/.pyenv/versions/$(pyenv version-name)/bin/virtualenvwrapper.sh" && source "${HOME}/.pyenv/versions/$(pyenv version-name)/bin/virtualenvwrapper.sh"
eval "$(pyenv virtualenv-init -)"

# export NVM_DIR="$HOME/.nvm"
# [ -s "/usr/local/opt/nvm/nvm.sh" ] && . "/usr/local/opt/nvm/nvm.sh"  # This loads nvm
# [ -s "/usr/local/opt/nvm/etc/bash_completion.d/nvm" ] && . "/usr/local/opt/nvm/etc/bash_completion.d/nvm"  # This loads nvm bash_completion

# source <(tca completion bash)
source <(flux completion bash)
source <(tanzu completion bash)
source <(glab completion bash)
source <(kp completion bash)
